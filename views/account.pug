extends layout

block content
    //- The main heading for the page
    h2 Account Settings

    //- Analytics Section
    .dashboard-container
        h3 Lifetime Analytics
        //- Grid for total stats
        .stats-grid
            .stat-card
                h3 Total Lifetime Rage
                p.rage-score= stats.total_rage.toLocaleString()
            .stat-card
                h3 Total Lifetime Deaths
                p.rage-score= stats.total_deaths.toLocaleString()
            .stat-card
                h3 Lifetime Avg. Rage
                p.rage-score= stats.averageRage
            .stat-card
                h3 Lifetime Go-To Phrase
                p.stat-value= stats.mostCommonPhrase

        //- Updated container for the on-demand chart
        .chart-container
            h4 Rage Progression
            p.chart-description Average rage level for each subsequent death across all of your sessions.
            canvas#rageProgressionChart
            .chart-actions
                button.btn.btn-primary#generateChartBtn Generate Graph

    //- FIX: Corrected indentation on this container
    .form-container
        h3 Invite Codes
        p As a trusted member, you can generate invite codes for others to join.
        if inviteCodes && inviteCodes.length > 0
            p Your available invite codes:
            ul.invite-code-list
                each item in inviteCodes
                    li.invite-code-item
                        span.invite-code= item.code
                        button.btn-copy(data-code=item.code) Copy
        else
            p You have no available invite codes.

        if canGenerateCode
            .chart-actions
                form(action="/account/generate-invite", method="POST")
                    button.btn.btn-primary(type="submit") Generate New Invite Code
        else if user.permission_level !== 5
            p.text-secondary You can generate a new code next month.

    //- Card for changing password
    .form-container
        form(action="/account/change-password", method="POST")
            h3 Change Password
            .form-group
                label(for="currentPassword") Current Password
                input#currentPassword(type="password", name="currentPassword", required)
            .form-group
                label(for="newPassword") New Password
                input#newPassword(type="password", name="newPassword", required)
            .form-group
                label(for="confirmPassword") Confirm New Password
                input#confirmPassword(type="password", name="confirmPassword", required)
            button.btn-primary(type="submit") Update Password

    //- Card for changing email
    .form-container
        form(action="/account/change-email", method="POST")
            h3 Change Email Address
            .form-group
                label(for="newEmail") New Email Address
                input#newEmail(type="email", name="newEmail", required, value=user.email)
            .form-group
                label(for="emailConfirmPassword") Current Password (for verification)
                input#emailConfirmPassword(type="password", name="currentPassword", required, placeholder="Enter your password to confirm")
            button.btn-primary(type="submit") Update Email

    //- Danger Zone for clearing data
    .danger-zone
        h3 Clear All Session Data
        p This will permanently delete all of your recorded sessions and rage logs. Your account will not be deleted, but your stats will be reset to zero. This action cannot be undone.
        form(
            action="/account/clear-data",
            method="POST",
            data-confirm="Are you absolutely sure you want to delete all of your session data? This action is irreversible.",
            data-confirm-title="Confirm Data Deletion"
        )
            button.delete-btn(type="submit") Delete All My Data

block scripts
    script.
        // --- Copy to Clipboard for Invite Codes ---
        document.querySelectorAll('.btn-copy').forEach(button => {
            button.addEventListener('click', () => {
                const codeToCopy = button.dataset.code;
                navigator.clipboard.writeText(codeToCopy).then(() => {
                    button.textContent = 'Copied!';
                    setTimeout(() => {
                        button.textContent = 'Copy';
                    }, 2000);
                }).catch(err => {
                    console.error('Failed to copy code:', err);
                    alert('Failed to copy code.');
                });
            });
        });

        // --- On-Demand Chart Generation ---
        document.addEventListener('DOMContentLoaded', () => {
            const generateBtn = document.getElementById('generateChartBtn');
            const canvas = document.getElementById('rageProgressionChart');
            const ctx = canvas.getContext('2d');
            let rageChart = null; // Variable to hold the chart instance

            const renderChart = (chartData) => {
                if (rageChart) {
                    rageChart.destroy();
                }
                if (!chartData || chartData.length === 0) {
                    canvas.style.display = 'none';
                    return;
                }
                canvas.style.display = 'block';

                const labels = chartData.map(d => `Death ${d.death_number}`);
                const data = chartData.map(d => parseFloat(d.average_rage).toFixed(2));

                const gradient = ctx.createLinearGradient(0, 0, 0, 400);
                gradient.addColorStop(0, 'rgba(220, 53, 69, 0.6)');
                gradient.addColorStop(1, 'rgba(220, 53, 69, 0.05)');

                rageChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Average Rage Level',
                            data: data,
                            borderColor: 'rgba(220, 53, 69, 1)',
                            backgroundColor: gradient,
                            fill: true,
                            tension: 0.4,
                            pointBackgroundColor: '#fff',
                            pointBorderColor: 'rgba(220, 53, 69, 1)',
                            pointBorderWidth: 2,
                            pointHoverRadius: 7,
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(220, 53, 69, 1)',
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 10,
                                grid: { color: 'rgba(255, 255, 255, 0.1)' },
                                ticks: { color: '#888' }
                            },
                            x: {
                                grid: { display: false },
                                ticks: { color: '#888' }
                            }
                        },
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                backgroundColor: '#000',
                                titleColor: '#fff',
                                bodyColor: '#fff',
                                borderColor: '#333',
                                borderWidth: 1
                            }
                        }
                    }
                });
            };

            generateBtn.addEventListener('click', async () => {
                generateBtn.disabled = true;
                generateBtn.textContent = 'Generating...';

                try {
                    const response = await fetch('/account/analytics/rage-progression');
                    if (!response.ok) {
                        throw new Error(`Server returned status: ${response.status}`);
                    }
                    const data = await response.json();
                    renderChart(data);
                } catch (error) {
                    console.error('Failed to fetch or render chart:', error);
                    generateBtn.textContent = 'Failed. Try Again.';
                } finally {
                    generateBtn.disabled = false;
                    generateBtn.textContent = 'Update Graph';
                }
            });
        });