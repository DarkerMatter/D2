extends layout

block content
    //- The main heading for the page
    h2 Account Settings

    //- Analytics Section
    .dashboard-container
        h3 Lifetime Analytics
        //- Grid for total stats
        .stats-grid
            .stat-card
                h3 Total Lifetime Rage
                p.rage-score= stats.total_rage.toLocaleString()
            .stat-card
                h3 Total Lifetime Deaths
                p.rage-score= stats.total_deaths.toLocaleString()
            .stat-card
                h3 Lifetime Avg. Rage
                p.rage-score= stats.averageRage
            .stat-card
                h3 Lifetime Go-To Phrase
                p.stat-value= stats.mostCommonPhrase

        //- FIX: The charts wrapper was missing and the charts were in the wrong place.
        //- This wrapper now correctly contains both charts outside of the stats grid.
        .charts-wrapper
            .chart-container
                h4 Rage Progression
                p.chart-description Average rage level for each subsequent death across all of your sessions.
                canvas#rageProgressionChart
                .chart-actions
                    button.btn.btn-primary#generateChartBtn Generate Graph
            .chart-container
                h4 "Colorful" Language Usage
                p.chart-description Your top 5 most frequently used swear words.
                canvas#swearWordChart
                .chart-actions
                    button.btn.btn-primary#generateSwearChartBtn Generate Graph

    .form-container
        h3 Customize Quick Phrases
        p Set up to three phrases that will appear as buttons for faster logging.
        form(action="/account/update-phrases", method="POST")
            .form-group
                label(for="phrase1") Quick Phrase 1
                input#phrase1(type="text", name="phrase1", value=user.quick_phrase_1, placeholder="e.g., 'Not again!'")
            .form-group
                label(for="phrase2") Quick Phrase 2
                input#phrase2(type="text", name="phrase2", value=user.quick_phrase_2, placeholder="e.g., 'This game is broken.'")
            .form-group
                label(for="phrase3") Quick Phrase 3
                input#phrase3(type="text", name="phrase3", value=user.quick_phrase_3, placeholder="e.g., 'I give up.'")
            button.btn-primary(type="submit") Save Phrases

    //- Achievements Section
    .form-container
        h3 Achievements
        .achievements-grid
            each achievement in achievements
                - const earned = earnedAchievements.has(achievement.id)
                .achievement-card(class=(earned ? 'earned' : 'unearned'), title=(earned ? `Earned on: ${new Date(earnedAchievements.get(achievement.id)).toLocaleDateString()}` : 'Not yet earned'))
                    .achievement-icon
                        i.bi(class=achievement.icon)
                    .achievement-details
                        h4.achievement-name= achievement.name
                        p.achievement-description= achievement.description

    //- Invite Codes Section
    .form-container
        h3 Invite Codes
        p As a trusted member, you can generate invite codes for others to join.
        if inviteCodes && inviteCodes.length > 0
            p Your available invite codes:
            ul.invite-code-list
                each item in inviteCodes
                    li.invite-code-item
                        span.invite-code= item.code
                        button.btn-copy(data-code=item.code) Copy
        else
            p You have no available invite codes.

        if canGenerateCode
            .chart-actions
                form(action="/account/generate-invite", method="POST")
                    button.btn.btn-primary(type="submit") Generate New Invite Code
        else if user.permission_level !== 5
            p.text-secondary You can generate a new code next month.

    //- Card for changing password
    .form-container
        form(action="/account/change-password", method="POST")
            h3 Change Password
            .form-group
                label(for="currentPassword") Current Password
                input#currentPassword(type="password", name="currentPassword", required)
            .form-group
                label(for="newPassword") New Password
                input#newPassword(type="password", name="newPassword", required)
            .form-group
                label(for="confirmPassword") Confirm New Password
                input#confirmPassword(type="password", name="confirmPassword", required)
            button.btn-primary(type="submit") Update Password

    //- Danger Zone for clearing data
    .danger-zone
        h3 Clear All Session Data
        p This will permanently delete all of your recorded sessions and rage logs. Your account will not be deleted, but your stats will be reset to zero. This action cannot be undone.
        form(
            action="/account/clear-data",
            method="POST",
            data-confirm="Are you absolutely sure you want to delete all of your session data? This action is irreversible.",
            data-confirm-title="Confirm Data Deletion"
        )
            button.delete-btn(type="submit") Delete All My Data

block scripts
    //- The entire script block has been restructured into a single, valid DOMContentLoaded listener.
    script.
        document.addEventListener('DOMContentLoaded', () => {
            // --- 1. Copy to Clipboard for Invite Codes ---
            document.querySelectorAll('.btn-copy').forEach(button => {
                button.addEventListener('click', () => {
                    const codeToCopy = button.dataset.code;
                    navigator.clipboard.writeText(codeToCopy).then(() => {
                        button.textContent = 'Copied!';
                        setTimeout(() => {
                            button.textContent = 'Copy';
                        }, 2000);
                    }).catch(err => {
                        console.error('Failed to copy code:', err);
                        alert('Failed to copy code.');
                    });
                });
            });

            // --- 2. Rage Progression Chart Logic ---
            const generateBtn = document.getElementById('generateChartBtn');
            const canvas = document.getElementById('rageProgressionChart');
            if (generateBtn && canvas) {
                const ctx = canvas.getContext('2d');
                let chart = null;

                const renderChart = (chartData) => {
                    if (chart) chart.destroy();
                    if (!chartData || chartData.length === 0) {
                        canvas.style.display = 'none';
                        const noDataMessage = document.createElement('p');
                        noDataMessage.textContent = 'No data to display. Go log some deaths!';
                        noDataMessage.style.color = 'var(--text-secondary)';
                        canvas.parentNode.insertBefore(noDataMessage, canvas.nextSibling);
                        return;
                    }
                    canvas.style.display = 'block';
                    chart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: chartData.map(d => `Death #${d.death_number}`),
                            datasets: [{
                                label: 'Average Rage Level',
                                data: chartData.map(d => d.average_rage),
                                fill: true,
                                // FIX: Changed the graph colors from blue to red
                                backgroundColor: 'rgba(220, 53, 69, 0.2)',
                                borderColor: 'rgba(220, 53, 69, 1)',
                                tension: 0.3
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: true,
                            scales: {
                                y: { beginAtZero: true, max: 10, grid: { color: 'rgba(255, 255, 255, 0.1)' }, ticks: { color: '#888' } },
                                x: { grid: { color: 'rgba(255, 255, 255, 0.1)' }, ticks: { color: '#888' } }
                            },
                            plugins: {
                                legend: { display: false },
                                tooltip: { backgroundColor: '#000', titleColor: '#fff', bodyColor: '#fff', borderColor: '#333', borderWidth: 1 }
                            }
                        }
                    });
                };

                generateBtn.addEventListener('click', async () => {
                    generateBtn.disabled = true;
                    generateBtn.textContent = 'Generating...';
                    try {
                        const response = await fetch('/account/analytics/rage-progression');
                        if (!response.ok) throw new Error(`Server returned status: ${response.status}`);
                        const data = await response.json();
                        renderChart(data);
                    } catch (error) {
                        console.error('Failed to fetch or render chart:', error);
                        generateBtn.textContent = 'Failed. Try Again.';
                    } finally {
                        if (generateBtn.textContent.includes('Generating')) {
                            generateBtn.style.display = 'none';
                        } else {
                            generateBtn.disabled = false;
                        }
                    }
                });
            }

            // --- 3. Swear Word Chart Logic ---
            const generateSwearBtn = document.getElementById('generateSwearChartBtn');
            const swearCanvas = document.getElementById('swearWordChart');
            if (generateSwearBtn && swearCanvas) {
                const swearCtx = swearCanvas.getContext('2d');
                let swearChart = null;

                const renderSwearChart = (chartData) => {
                    if (swearChart) swearChart.destroy();
                    if (!chartData || chartData.length === 0) {
                        swearCanvas.style.display = 'none';
                        const noDataMessage = document.createElement('p');
                        noDataMessage.textContent = 'No data to display. Time to get tilted!';
                        noDataMessage.style.color = 'var(--text-secondary)';
                        swearCanvas.parentNode.insertBefore(noDataMessage, swearCanvas.nextSibling);
                        return;
                    }
                    swearCanvas.style.display = 'block';
                    swearChart = new Chart(swearCtx, {
                        type: 'bar',
                        data: {
                            labels: chartData.map(d => d.name),
                            datasets: [{
                                label: 'Usage Count',
                                data: chartData.map(d => d.count),
                                backgroundColor: ['rgba(220, 53, 69, 0.7)', 'rgba(245, 166, 35, 0.7)', 'rgba(0, 112, 243, 0.7)', 'rgba(25, 135, 84, 0.7)', 'rgba(108, 117, 125, 0.7)'],
                                borderColor: ['rgba(220, 53, 69, 1)', 'rgba(245, 166, 35, 1)', 'rgba(0, 112, 243, 1)', 'rgba(25, 135, 84, 1)', 'rgba(108, 117, 125, 1)'],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            indexAxis: 'y',
                            responsive: true,
                            maintainAspectRatio: true,
                            scales: {
                                x: { beginAtZero: true, grid: { color: 'rgba(255, 255, 255, 0.1)' }, ticks: { color: '#888', precision: 0 } },
                                y: { grid: { display: false }, ticks: { color: '#888' } }
                            },
                            plugins: {
                                legend: { display: false },
                                tooltip: { backgroundColor: '#000', titleColor: '#fff', bodyColor: '#fff', borderColor: '#333', borderWidth: 1 }
                            }
                        }
                    });
                };

                generateSwearBtn.addEventListener('click', async () => {
                    generateSwearBtn.disabled = true;
                    generateSwearBtn.textContent = 'Analyzing...';
                    try {
                        const response = await fetch('/account/analytics/swear-words');
                        if (!response.ok) throw new Error(`Server error: ${response.status}`);
                        const data = await response.json();
                        renderSwearChart(data);
                    } catch (error) {
                        console.error('Failed to fetch or render swear chart:', error);
                        generateSwearBtn.textContent = 'Failed. Try Again.';
                    } finally {
                        if (generateSwearBtn.textContent.includes('Analyzing')) {
                            generateSwearBtn.style.display = 'none';
                        } else {
                            generateSwearBtn.disabled = false;
                        }
                    }
                });
            }
        });